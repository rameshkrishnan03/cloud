name: Encrypt Secret from Power Automate
on:
  repository_dispatch:
    types: [encrypt-secret]

permissions:
  contents: write
  actions: write

jobs:
  encrypt-secret:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          pip install pynacl

      - name: Debug received public key
        run: |
          echo "Received public key (base64): ${{ github.event.client_payload.key }}"
          echo "Public key length (base64): $(echo '${{ github.event.client_payload.key }}' | wc -c)"

      - name: Encrypt secret
        id: encrypt
        env:
          SECRET_VALUE: ${{ github.event.client_payload.secret_value }}
          PUBLIC_KEY: ${{ github.event.client_payload.key }}
        run: |
          python - <<EOF
          from base64 import b64encode, b64decode
          from nacl import encoding, public
          import sys, json, os

          def encrypt(public_key: str, secret_value: str) -> str:
              """Encrypt a secret using libsodium"""
              try:
                  # Remove any whitespace from the public key
                  public_key = public_key.strip()
                  
                  # Decode the public key from base64
                  public_key_bytes = b64decode(public_key)
                  
                  # Print debug information
                  print(f"Decoded public key length: {len(public_key_bytes)} bytes")
                  
                  # Create public key object
                  public_key_obj = public.PublicKey(public_key_bytes)
                  
                  # Create sealed box
                  box = public.SealedBox(public_key_obj)
                  
                  # Encrypt the secret value
                  encrypted = box.encrypt(secret_value.encode('utf-8'))
                  
                  # Return base64 encoded encrypted value
                  return b64encode(encrypted).decode('utf-8')
              except Exception as e:
                  print(f"Error during encryption: {str(e)}")
                  print(f"Public key (base64): {public_key}")
                  raise

          # Get the values from environment
          public_key = "${{ env.PUBLIC_KEY }}"
          secret_value = os.environ['SECRET_VALUE']

          try:
              # Encrypt and print the result
              encrypted_value = encrypt(public_key, secret_value)
              print(f"::set-output name=encrypted_value::{encrypted_value}")
          except Exception as e:
              print(f"Failed to encrypt: {str(e)}")
              sys.exit(1)
          EOF

      - name: Create or update secret
        if: success()
        run: |
          curl -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.event.client_payload.token }}" \
            https://api.github.com/repos/rameshkrishnan03/cloud/actions/secrets/${{ github.event.client_payload.secret_name }} \
            -d "{\"encrypted_value\":\"${{ steps.encrypt.outputs.encrypted_value }}\",\"key_id\":\"${{ github.event.client_payload.key_id }}\"}"

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: Data

      - name: Create JSON file from payload
        run: |
          sanitized_payload=$(echo '${{ toJSON(github.event.client_payload) }}' | jq '{secret_value: .secret_value}')
          sanitized_name=$(echo "${{ github.event.client_payload.name }}" | tr ' ' '_')
          echo "$sanitized_payload" > ${sanitized_name}.json
          
      - name: Commit and push
        run: |
          git config user.email "suriyaramesh486@gmail.com"
          git config user.name "rameshkrishnan03"
          sanitized_name=$(echo "${{ github.event.client_payload.name }}" | tr ' ' '_')
          git add ${sanitized_name}.json
          git commit -m "Save client payload data for ${{ github.event.client_payload.name }}"
          git push origin Data
        
      - name: Save encrypted secret to file
        run: |
          echo "Encrypted_value: ${{ steps.encrypt.outputs.encrypted_value }}" > secret.txt
          echo "key_id: ${{ github.event.client_payload.key_id }}" >> secret.txt

      - name: Commit and push secret file
        run: |
           git config user.email "suriyaramesh486@gmail.com"
           git config user.name "rameshkrishnan03"
           git add secret.txt
           git commit -m "Add encrypted secret"
           git push origin main
